/**
/**
 * C'est la classe d'envoie le message 
 */
package Dynamic.Panel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import Base.connect;
import java.awt.HeadlessException;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;

public class Message extends javax.swing.JPanel {
    Connection conn = null;
    ResultSet rs=null;
    PreparedStatement pst=null;
    public Message() {
        initComponents();
        NomDest();
        FillListe();
    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMsg = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        ListDest = new javax.swing.JComboBox<>();
        listgroupe = new javax.swing.JComboBox<>();
        unDest = new javax.swing.JRadioButton();
        unGroupe = new javax.swing.JRadioButton();
        MsgCrypte = new javax.swing.JCheckBox();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel2.setText("Message");

        jButton1.setText("Envoyer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtMsg.setColumns(20);
        txtMsg.setRows(5);
        jScrollPane2.setViewportView(txtMsg);

        jButton2.setText("Annuler");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        jLabel3.setText("Message");

        ListDest.setVisible(false);

        listgroupe.setVisible(false);

        unDest.setText("Un destinataire");
        unDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unDestActionPerformed(evt);
            }
        });

        unGroupe.setText("Un groupe");
        unGroupe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unGroupeActionPerformed(evt);
            }
        });

        MsgCrypte.setText("Message Crypte");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(unDest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(unGroupe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(MsgCrypte)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(30, 30, 30))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(listgroupe, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ListDest, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(42, 42, 42))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ListDest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unDest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listgroupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unGroupe))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(155, 155, 155))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MsgCrypte)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        EnvoieMsg();  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void EnvoieMsg() {
        String msg = txtMsg.getText();
        conn = connect.getConnect(); //connection base
        String dest = null;
        String data;
        ArrayList<String>  datagroupe= new ArrayList<String>();
        
        if(unDest.isSelected()){
            /**Envoie msg a une seule destinataire **/
            dest = String.valueOf(ListDest.getSelectedItem());
            try {
                        Class.forName("com.mysql.jdbc.Driver");
                        if (conn != null) {
                            System.out.println("Connection");
                            String sql = "INSERT INTO MESSAGE (idmsg, dest, msg) VALUES (NULL, ?, ?)";
                            PreparedStatement statement = conn.prepareStatement(sql);
                            statement.setString(1, dest);
                            statement.setString(2, msg);
                            int rowsInserted = statement.executeUpdate();
                            data = " {\"action\" : \"send\", \"dest\" : '" + dest + "', \"msg\" : '" + msg + "'}";
                            if (rowsInserted > 0) {
                                JOptionPane.showMessageDialog(null, "Message envoyé à "+ dest);        
                                if (MsgCrypte.isSelected()){
                                    ConnServerCrypte(data);
                                }else{
                                    ConnServer(data);
                                }
                                txtMsg.setText("");
                            }
                            System.out.println(data);
                        }
                    } catch (ClassNotFoundException ex) {
                        System.out.println("Problem: database driver class");
                        ex.printStackTrace();
                    } catch (SQLException ex) {
                        System.out.println("Problem connexion, verifier login/mdp");
                        ex.printStackTrace();
                    } 
        }else{
            /**Envoie msg a un groupe **/
            conn = connect.getConnect();
            try{
                /**recuperer le nom de membres de groupe**/
                String groupe=String.valueOf(listgroupe.getSelectedItem());
                String sql2 = " SELECT DISTINCT destinataire.nom, destinataire.prenom FROM destinataire, groupe WHERE destinataire.id = groupe.idDest AND nomGroupe = " + "'" + groupe + "'";
                pst=conn.prepareStatement(sql2);
                rs=pst.executeQuery();
                System.out.println("OK nama membre");
                while(rs.next()){
                    dest=rs.getString("prenom")+" "+rs.getString("nom");
                    System.out.println(dest);
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        if (conn != null) {
                            System.out.println("Connection");
                            String sql = "INSERT INTO MESSAGE (idmsg, dest, msg) VALUES (NULL, ?, ?)";
                            PreparedStatement statement = conn.prepareStatement(sql);
                            statement.setString(1, dest);
                            statement.setString(2, msg);
                            int rowsInserted = statement.executeUpdate();
                            data = " {\"action\" : \"send\", \"dest\" : '" + dest + "', \"msg\" : '" + msg + "'}";
                            datagroupe.add(data);
                            if (rowsInserted > 0) {
                                JOptionPane.showMessageDialog(null, "Message envoyé à "+ dest);        
                                txtMsg.setText("");
                            }
                        }
                    } catch (ClassNotFoundException ex) {
                        System.out.println("Problem: database driver class");
                        ex.printStackTrace();
                    } catch (SQLException ex) {
                        System.out.println("Problem connexion, verifier login/mdp");
                        ex.printStackTrace();
                    } 
                }
                    System.out.println(datagroupe); //envoie data groupe
                    String data1 = datagroupe.toString(); 
                    if (MsgCrypte.isSelected()){
                        ConnServerCrypte(data1); 
                    }else{
                        ConnServer(data1);
                    }
            } catch (SQLException | HeadlessException e){
                JOptionPane.showMessageDialog(null, e);
            }
        } 
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        txtMsg.setText(""); 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void unDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unDestActionPerformed
         if (unDest.isSelected()){
            unGroupe.setSelected(false);
            ListDest.setVisible(true);
            listgroupe.setVisible(false);
            this.repaint();
            this.revalidate();
        }else{
            ListDest.setVisible(false);
        } 
    }//GEN-LAST:event_unDestActionPerformed

    private void unGroupeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unGroupeActionPerformed
         if (unGroupe.isSelected()){       
            unDest.setSelected(false);
            listgroupe.setVisible(true);
            ListDest.setVisible(false);
            this.repaint();
            this.revalidate();
        }else{
            listgroupe.setVisible(false);
        } 
    }//GEN-LAST:event_unGroupeActionPerformed

    private void FillListe(){
        conn = connect.getConnect(); //connection base
        try{
            String sql="select DISTINCT nomGroupe from GROUPE ORDER BY nomGroupe ASC";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            System.out.println("OK");
            
            while(rs.next()){
                String groupe=rs.getString("nomGroupe");
                listgroupe.addItem(groupe);        
            }
        }catch(Exception e){
            System.out.println("KO Groupe");
            e.printStackTrace();
        }
    }
    
    private void NomDest(){
        conn = connect.getConnect(); //connection base
        try{
            String sql4="select DISTINCT nom,prenom from DESTINATAIRE ORDER BY prenom ASC";
            pst=conn.prepareStatement(sql4);
            rs=pst.executeQuery();
            System.out.println("OK");
            
            while(rs.next()){
                String dest=rs.getString("nom");
               ListDest.addItem(dest);        
            }
            
        }catch(Exception e){
            System.out.println("KO nom membre");
            e.printStackTrace();
        }
    }

    private void ConnServer(String msg){
        try{
		Socket s = new Socket("192.168.43.250", 3000);// send connection request to local machine port 3000	
                
        
		System.out.println("connection established"); // va etre afficher si la connection est bien établir		
			
                DataOutputStream out = new DataOutputStream(s.getOutputStream()); // on a creer un objet de type DataOutputStream qui contient le message qui va etre envoye
		DataInputStream in = new DataInputStream(s.getInputStream()); //on a creer un objet de type DataOutputStream qui contient le message qui est recu de Serveur
							
		out.writeUTF(msg);
		String reponse = in.readUTF(); //recois le message du serveur et le met dans une variable de type string
			
		System.out.println(reponse); // afficher le msg
	}catch(Exception e){
		System.out.println(e);
                System.out.println("connection KO"); // va etre affiche si la connexion echoue
	}
    
    }
    
    private void ConnServerCrypte(String msg){
        try{
		Socket s = new Socket("192.168.43.250", 3000);// send connection request to local machine port 3000	

		System.out.println("connection established"); // va etre afficher si la connection est bien établir		
		String key1 = "1234567812345678"; //C'est la clé de 128 bits pour cryptage
                byte[] key2 = key1.getBytes();
                SecretKeySpec secret = new SecretKeySpec(key2, "AES"); // le type de crptage AES avec la cle
          
                        
                Cipher cipher = Cipher.getInstance("AES");        
                cipher.init(Cipher.ENCRYPT_MODE, secret);
                byte[] encrypted = cipher.doFinal(msg.getBytes());//on crypte le mesasage
			
                DataOutputStream out = new DataOutputStream(s.getOutputStream());
		DataInputStream in = new DataInputStream(s.getInputStream());
							
		out.writeUTF(new String(encrypted)); //envoie un message crypte
                String reponse = in.readUTF(); 
			
		System.out.println(reponse);
	}catch(Exception e){
		System.out.println(e);
                System.out.println("connection KO");
	}
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ListDest;
    private javax.swing.JCheckBox MsgCrypte;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> listgroupe;
    private javax.swing.JTextArea txtMsg;
    private javax.swing.JRadioButton unDest;
    private javax.swing.JRadioButton unGroupe;
    // End of variables declaration//GEN-END:variables

    
}
