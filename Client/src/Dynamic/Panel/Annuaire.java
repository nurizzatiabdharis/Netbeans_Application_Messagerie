/**
 *
 * C'est la classe ou il y a l'affichage de tous les destinataires existent dans BDD
 */
package Dynamic.Panel;

import java.awt.BorderLayout;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import net.proteanit.sql.DbUtils;
import Base.connect;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.table.TableModel;

public class Annuaire extends javax.swing.JPanel {
    Connection conn = null;
    ResultSet rs=null;
    PreparedStatement pst=null;
    /**
     * Creates new form Annuaire
     */
        
    public Annuaire(){
        initComponents();
        conn = connect.getConnect(); //connexion a la base de donnee
        UpdateAnnuairePerso();
        UpdateAnnuaireProf();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TabProf = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabPerso = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 204));

        TabProf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "nom", "prenom", "tel", "mail"
            }
        ));
        jScrollPane1.setViewportView(TabProf);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        jLabel1.setText("Contact Personnel");

        jButton3.setText("Recharger");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        TabPerso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "nom", "prenom", "tel", "mail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TabPerso);
        if (TabPerso.getColumnModel().getColumnCount() > 0) {
            TabPerso.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        jLabel2.setText("Contact Professionnel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(250, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Il ya un problem a recharger automatiquement, donc ce button permet a recharger tous les info depuis base de donne	
        UpdateAnnuairePerso();
        UpdateAnnuaireProf();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void UpdateAnnuairePerso() {
        /* CONTACT PERSONNEL
        l'affichage dans la forme d'une table tous les destinataires de type PERSONNEL existent dans la base de donnee
        */
        try {
            Class.forName("com.mysql.jdbc.Driver");
                if (conn != null) {
                    String sql= "SELECT nom,prenom,tel,mail \n" +
                                "FROM DESTINATAIRE\n" +
                                "WHERE type ='Personnel'\n" +
                                "ORDER BY nom ASC";
                    pst=conn.prepareStatement(sql);
                    rs=pst.executeQuery();
                    TabPerso.setModel(DbUtils.resultSetToTableModel(rs)); //mettre le champ dans la table
                }
        } catch (ClassNotFoundException ex) {
            System.out.println("Problem: database driver class");
            ex.printStackTrace();
        } catch (SQLException ex) {
            System.out.println("Problem connexion, verifier login/mdp");
            ex.printStackTrace();
        } 
    }
    
    public void UpdateAnnuaireProf() {
        /* CONTACT PROFESSIONNEL
        l'affichage dans la forme d'une table tous les destinataires de type PROFESSIONNEL existent dans la base de donnee
        */
        try {
            Class.forName("com.mysql.jdbc.Driver");
            if (conn != null) {
                String sql= "SELECT nom,prenom,tel,mail \n" +
                            "FROM DESTINATAIRE\n" +
                            "WHERE type ='Professionnel'\n" +
                            "ORDER BY nom ASC";
                pst=conn.prepareStatement(sql);
                rs=pst.executeQuery();
                TabProf.setModel(DbUtils.resultSetToTableModel(rs));
            }
        } catch (ClassNotFoundException ex) {
            System.out.println("Problem: database driver class");
            ex.printStackTrace();
        } catch (SQLException ex) {
            System.out.println("Problem connexion, verifier login/mdp");
            ex.printStackTrace();
        } 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabPerso;
    private javax.swing.JTable TabProf;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
